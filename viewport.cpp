//==============================================================================

#include <viewport.hpp>

//------------------------------------------------------------------------------
ViewPort::ViewPort()
    :
    m_offset(),
    m_bounds(),
    m_screen(),
    m_hscale( 0.0f ),
    m_vscale( 0.0f ),
    m_angle( 0.0f )
{
}

//------------------------------------------------------------------------------
ViewPort::~ViewPort()
{
}

//------------------------------------------------------------------------------
float
ViewPort::angle()
{
    return m_angle;
}

//------------------------------------------------------------------------------
b2Vec2 &
ViewPort::offset()
{
    return m_offset;
}

//------------------------------------------------------------------------------
b2Vec2 &
ViewPort::bounds()
{
    return m_bounds;
}

//------------------------------------------------------------------------------
b2Vec2 &
ViewPort::screen()
{
    return m_screen;
}

//------------------------------------------------------------------------------
void
ViewPort::screenToWorld( b2Vec2 & point )
{
    point.x = m_offset.x + ( point.x - m_screen.x * 0.5f ) / m_hscale;
    point.y = m_offset.y + ( point.y - m_screen.y * 0.5f ) / m_vscale;
}

//------------------------------------------------------------------------------
float
ViewPort::hscale() const
{
    _updateRatios();
    return m_hscale;
}

//------------------------------------------------------------------------------
float
ViewPort::vscale() const
{
    _updateRatios();
    return m_vscale;
}

//------------------------------------------------------------------------------
void
ViewPort::setAngle( float angle )
{
    m_angle = angle;
}

//------------------------------------------------------------------------------
// private:
//------------------------------------------------------------------------------
void
ViewPort::_updateRatios() const
{
    m_hscale = m_screen.x / m_bounds.x;
    m_vscale = m_screen.y / m_bounds.y;
}

//==============================================================================
